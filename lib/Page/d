
  Set first = {};
  addSearch() async {
    try {
      await Firestore.instance
          .collectionGroup('users')
          .getDocuments()
          .then((value) async {
        List docs = value.documents;
        print(docs.length);
        // for (var i = 0; i < 3064; i++) {
        //   DocumentSnapshot doc = docs[699 + i];
        //   print(699 + i);
        //   print(doc.data['uid']);

        //   doc['id'] == null || doc['uid'] == '' || doc['id'][0] == '.'
        //       ? null
        //       : await rebuild(doc, doc.data['uid'], {
        //           'id': doc.data['id'],
        //           'uid': doc.data['uid'],
        //           'searchIndex': doc.data['searchIndex']
        //         });
        // }
        // docs.forEach((dat) async {
        //   print(docs.length);
        //   // print(dat?.data['uid']);
        //   // print(dat?.data['searchIndex'][0]);
        //   // first.add(dat?.data['id'][0] ?? '');
        //   //  print(dat.data['id'][0]);

        //   print(backward(docs, dat));
        // });
      });
    } catch (e) {
      print(e.toString());
    }
    print('fin');
  }

  dynamic backward(List list, dynamic value) {
    return list.indexOf(value);
  }

  rebuild(DocumentSnapshot id, String uid, Map<String, dynamic> data) async {
    List first = id.data['searchIndex'];
    await have(first[0], uid)
        ? null
        : await Firestore.instance
            .collection('SearchUsers')
            .document(first[0])
            .collection('users')
            .document(uid)
            .setData(data);
  }

  Future<bool> have(String id, String uid) async {
    final QuerySnapshot users = await Firestore.instance
        .collection('SearchUsers')
        .document(id)
        .collection('users')
        .where('uid', isEqualTo: uid)
        .limit(1)
        .getDocuments();
    final List<DocumentSnapshot> doc = users.documents;
    return doc.length == 1;
  }